// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user_credentials.proto

package user_credentials

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type UserPermissionRequest struct {
	UserHash             string   `protobuf:"bytes,1,opt,name=userHash,proto3" json:"userHash,omitempty"`
	AccessPointID        int32    `protobuf:"varint,2,opt,name=accessPointID,proto3" json:"accessPointID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPermissionRequest) Reset()         { *m = UserPermissionRequest{} }
func (m *UserPermissionRequest) String() string { return proto.CompactTextString(m) }
func (*UserPermissionRequest) ProtoMessage()    {}
func (*UserPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c757240c3f216d3d, []int{0}
}

func (m *UserPermissionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserPermissionRequest.Unmarshal(m, b)
}
func (m *UserPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserPermissionRequest.Marshal(b, m, deterministic)
}
func (m *UserPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPermissionRequest.Merge(m, src)
}
func (m *UserPermissionRequest) XXX_Size() int {
	return xxx_messageInfo_UserPermissionRequest.Size(m)
}
func (m *UserPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserPermissionRequest proto.InternalMessageInfo

func (m *UserPermissionRequest) GetUserHash() string {
	if m != nil {
		return m.UserHash
	}
	return ""
}

func (m *UserPermissionRequest) GetAccessPointID() int32 {
	if m != nil {
		return m.AccessPointID
	}
	return 0
}

// The response message containing the greetings
type UserPermissionReply struct {
	CanAccess            bool     `protobuf:"varint,1,opt,name=canAccess,proto3" json:"canAccess,omitempty"`
	UserID               int32    `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	UserGroupID          int32    `protobuf:"varint,3,opt,name=userGroupID,proto3" json:"userGroupID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPermissionReply) Reset()         { *m = UserPermissionReply{} }
func (m *UserPermissionReply) String() string { return proto.CompactTextString(m) }
func (*UserPermissionReply) ProtoMessage()    {}
func (*UserPermissionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c757240c3f216d3d, []int{1}
}

func (m *UserPermissionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserPermissionReply.Unmarshal(m, b)
}
func (m *UserPermissionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserPermissionReply.Marshal(b, m, deterministic)
}
func (m *UserPermissionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPermissionReply.Merge(m, src)
}
func (m *UserPermissionReply) XXX_Size() int {
	return xxx_messageInfo_UserPermissionReply.Size(m)
}
func (m *UserPermissionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPermissionReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserPermissionReply proto.InternalMessageInfo

func (m *UserPermissionReply) GetCanAccess() bool {
	if m != nil {
		return m.CanAccess
	}
	return false
}

func (m *UserPermissionReply) GetUserID() int32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *UserPermissionReply) GetUserGroupID() int32 {
	if m != nil {
		return m.UserGroupID
	}
	return 0
}

func init() {
	proto.RegisterType((*UserPermissionRequest)(nil), "UserPermissionRequest")
	proto.RegisterType((*UserPermissionReply)(nil), "UserPermissionReply")
}

func init() { proto.RegisterFile("user_credentials.proto", fileDescriptor_c757240c3f216d3d) }

var fileDescriptor_c757240c3f216d3d = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x2d, 0x4e, 0x2d,
	0x8a, 0x4f, 0x2e, 0x4a, 0x4d, 0x49, 0xcd, 0x2b, 0xc9, 0x4c, 0xcc, 0x29, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x57, 0x8a, 0xe4, 0x12, 0x0d, 0x2d, 0x4e, 0x2d, 0x0a, 0x48, 0x2d, 0xca, 0xcd, 0x2c,
	0x2e, 0xce, 0xcc, 0xcf, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe2, 0xe2, 0x00,
	0x69, 0xf1, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x85, 0x54,
	0xb8, 0x78, 0x13, 0x93, 0x93, 0x53, 0x8b, 0x8b, 0x03, 0xf2, 0x33, 0xf3, 0x4a, 0x3c, 0x5d, 0x24,
	0x98, 0x14, 0x18, 0x35, 0x58, 0x83, 0x50, 0x05, 0x95, 0x72, 0xb9, 0x84, 0xd1, 0x8d, 0x2e, 0xc8,
	0xa9, 0x14, 0x92, 0xe1, 0xe2, 0x4c, 0x4e, 0xcc, 0x73, 0x04, 0x2b, 0x05, 0x9b, 0xcc, 0x11, 0x84,
	0x10, 0x10, 0x12, 0xe3, 0x62, 0x03, 0x59, 0x03, 0x37, 0x13, 0xca, 0x13, 0x52, 0xe0, 0xe2, 0x06,
	0xb1, 0xdc, 0x8b, 0xf2, 0x4b, 0x0b, 0x3c, 0x5d, 0x24, 0x98, 0xc1, 0x92, 0xc8, 0x42, 0x46, 0x21,
	0x5c, 0xfc, 0x20, 0xeb, 0x9c, 0x11, 0x5e, 0x14, 0x72, 0x84, 0x0a, 0xc1, 0x4c, 0x77, 0x0c, 0x10,
	0x12, 0xd3, 0xc3, 0xea, 0x5d, 0x29, 0x11, 0x3d, 0x2c, 0x6e, 0x55, 0x62, 0x48, 0x62, 0x03, 0x07,
	0x93, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x7b, 0xb7, 0xf1, 0x40, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserCredentialsClient is the client API for UserCredentials service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserCredentialsClient interface {
	// Sends a greeting
	UserCanAccessAP(ctx context.Context, in *UserPermissionRequest, opts ...grpc.CallOption) (*UserPermissionReply, error)
}

type userCredentialsClient struct {
	cc *grpc.ClientConn
}

func NewUserCredentialsClient(cc *grpc.ClientConn) UserCredentialsClient {
	return &userCredentialsClient{cc}
}

func (c *userCredentialsClient) UserCanAccessAP(ctx context.Context, in *UserPermissionRequest, opts ...grpc.CallOption) (*UserPermissionReply, error) {
	out := new(UserPermissionReply)
	err := c.cc.Invoke(ctx, "/UserCredentials/UserCanAccessAP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCredentialsServer is the server API for UserCredentials service.
type UserCredentialsServer interface {
	// Sends a greeting
	UserCanAccessAP(context.Context, *UserPermissionRequest) (*UserPermissionReply, error)
}

// UnimplementedUserCredentialsServer can be embedded to have forward compatible implementations.
type UnimplementedUserCredentialsServer struct {
}

func (*UnimplementedUserCredentialsServer) UserCanAccessAP(ctx context.Context, req *UserPermissionRequest) (*UserPermissionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCanAccessAP not implemented")
}

func RegisterUserCredentialsServer(s *grpc.Server, srv UserCredentialsServer) {
	s.RegisterService(&_UserCredentials_serviceDesc, srv)
}

func _UserCredentials_UserCanAccessAP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialsServer).UserCanAccessAP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserCredentials/UserCanAccessAP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialsServer).UserCanAccessAP(ctx, req.(*UserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserCredentials_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UserCredentials",
	HandlerType: (*UserCredentialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCanAccessAP",
			Handler:    _UserCredentials_UserCanAccessAP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_credentials.proto",
}
